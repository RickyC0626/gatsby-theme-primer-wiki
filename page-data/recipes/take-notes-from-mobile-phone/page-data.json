{"componentChunkName":"component---packages-theme-src-templates-post-query-js","path":"/recipes/take-notes-from-mobile-phone/","result":{"data":{"mdx":{"id":"85feec74-0948-5bfd-8ad4-2e98e9c3c291","tableOfContents":{"items":[{"url":"#take-notes-on-mobile-phones","title":"Take notes on mobile phones","items":[{"url":"#bespoke-mobile-app-for-foam","title":"Bespoke mobile app for Foam"}]}]},"fields":{"slug":"/recipes/take-notes-from-mobile-phone/"},"frontmatter":{"title":"","description":""},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"take-notes-on-mobile-phones\"\n  }, \"Take notes on mobile phones\"), mdx(\"p\", null, \"This #recipe offers solutions to taking Foam notes on the go.\"), mdx(\"p\", null, \"For the time being we have decided to not build a mobile app, but rely on third parties (see \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/dev/build-vs-assemble/\",\n    \"title\": \"build-vs-assemble\"\n  }, \"[[build-vs-assemble]]\"), \").\"), mdx(\"p\", null, \"The most promising options are:\"), mdx(\"h3\", {\n    \"id\": \"gitjournal\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"https://gitjournal.io/\"\n  }, \"GitJournal\")), mdx(\"p\", null, \"Pros\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Open source\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Already a usable solution.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Provides functionality to edit, create, and browser markdown files.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Support journal mode, todo lists, and free writing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Syncs to GitHub repo\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Supports Wikilinks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Supports Backlinks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Developer is happy to prioritize Foam compatibility\")), mdx(\"p\", null, \"Cons\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Doesn't generate link reference lists (but this is ok, since \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/features/workspace-janitor/\",\n    \"title\": \"workspace-janitor\"\n  }, \"[[workspace-janitor]]\"), \" as a GitHub action can solve this)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Not as sleek as Apple/Google notes, some keyboard state glitching on Android, etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lack of control over roadmap. Established product with a paid plan, so may not be open to Foam-supportive changes and additions that don't benefit most users.\")), mdx(\"p\", null, \"Verdict: Good. By far best effort/outcome ratio would be to help improve GitJournal rather than building a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/recipes/#bespoke-mobile-app-for-foam/\"\n  }, \"bespoke mobile app\"), \".\"), mdx(\"h3\", {\n    \"id\": \"github-codespaces\"\n  }, \"GitHub Codespaces\"), mdx(\"p\", null, \"Pros\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Works out of the box just like the desktop app\")), mdx(\"p\", null, \"Cons\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"not generally available quite yet\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.github.com/en/free-pro-team@latest/github/developing-online-with-codespaces/about-billing-for-codespaces\"\n  }, \"Pricing\"))), mdx(\"p\", null, \"For a quick demo, see \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.youtube.com/watch?v=KI5m4Uy8_4I\"\n  }, \"https://www.youtube.com/watch?v=KI5m4Uy8_4I\"), \".\"), mdx(\"p\", null, \"Verdict: Good. Pricing should be reasonable for taking notes on the fly. Harder to assess for people who would constantly use Foam from mobile phone.\"), mdx(\"h2\", {\n    \"id\": \"bespoke-mobile-app-for-foam\"\n  }, \"Bespoke mobile app for Foam\"), mdx(\"p\", null, \"Given we already have a solution, why would we spend time and effort building a bespoke mobile app?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Taking notes on the go is a key part of a good note taking process, and the process should feel effortless\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Having a custom app could help us support key user workflows in a more Foam-specific manner\")), mdx(\"p\", null, \"If such an app was worth building, it would have to have the following features:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Instant loading and syncing for quick notes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sleek, simple, beautifully designed user experience.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ability to search and navigate forward links and back links (onlly in paid GitJournal version)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Killer feature that makes it the best note taking tool for Foam (?)\")), mdx(\"p\", null, \"Given the effort vs reward ratio, it's a low priority for core team, but if someone wants to work on this, we can provide support! Talk to us on the #mobile-apps channel on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://foambubble.github.io/join-discord/w\"\n  }, \"Foam Discord\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"build-vs-assemble\"\n  }, \"Build vs Assemble\"), mdx(\"p\", null, \"The Foam prototype is built by assembling third-party extensions, which seems like a good strategy because\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It supports picking and mixing of tools and workflows\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Less code to write an maintain\")), mdx(\"p\", null, \"But there's also a bunch of roadmap items that are hard to implement this way, as the third party plugins don't do exactly what we want them to do (e.g. Markdown All In One is not compatible with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/referencing-notes-by-title\",\n    \"title\": \"referencing-notes-by-title\"\n  }, \"[[referencing-notes-by-title]]\"), \".\"), mdx(\"p\", null, \"Overall, we should strive to build big things from small things. Focused, interoperable modules are better, because they allow users to pick and mix which features work for them. A good example of why this matters is the Markdown All In One extension we rely on: While it provides many of the things we need, a few of its features are incompatible with how I would like to work, and therefore it becomes a limiter of how well I can improve my own workflow.\"), mdx(\"p\", null, \"However, there becomes a point where we may benefit from implementing a centralised solution, e.g. a syntax, an extension or perhaps a VSCode language server. As much as possible, we should allow users to operate in a decentralised manner.\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/dev/build-vs-assemble/","title":"Build vs Assemble"}},{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"janitor\"\n  }, \"Janitor\"), mdx(\"p\", null, \"To store your personal knowledge graph in markdown files instead of a database, we need some additional tooling to create and maintain relationships with notes.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Foam Janitor\"), \" (inspired by Andy Matuschak's \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/andymatuschak/note-link-janitor\"\n  }, \"note-link-janitor\"), \") helps you migrate existing notes to Foam, and maintain your Foam's health over time.\"), mdx(\"p\", null, \"Currently, Foam's Janitor helps you to:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ensure your \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/features/link-reference-definitions/\",\n    \"title\": \"link-reference-definitions\"\n  }, \"[[link-reference-definitions]]\"), \" are up to date\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ensure every document has a well-formatted title (required for Markdown Links, Markdown Notes, and Foam Gatsby Template compatibility)\")), mdx(\"p\", null, \"In the future, Janitor can help you with\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Updating \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/dev/materialized-backlinks/\",\n    \"title\": \"materialized-backlinks\"\n  }, \"[[materialized-backlinks]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lint, format and structure notes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rename and move notes around while keeping their references up to date.\")), mdx(\"h2\", {\n    \"id\": \"using-janitor-from-vs-code-experimental\"\n  }, \"Using Janitor from VS Code (Experimental)\"), mdx(\"p\", null, \"Execute the \\\"Foam: Run Janitor\\\" command from the command palette.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/fb14baa5377fbf1ab939d13def09a1c7/foam-janitor-demo.gif\",\n    \"alt\": \"Foam Janitor demo\"\n  })), mdx(\"h2\", {\n    \"id\": \"using-janitor-from-command-line-experimental\"\n  }, \"Using Janitor from command line (Experimental)\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\u26A0\\uFE0F Improvements to this documentation are welcome!\")), mdx(\"p\", null, \"The Janitor can be installed from \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/\"\n  }, \"NPM\"), \" and executed as a standalone CLI tool:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"> npm install -g foam-cli\\n> foam janitor path/to/workspace\\n\")), mdx(\"p\", null, \"You can run the Janitor as a git hook on every commit to ensure your workspace links are up to date. This can be especially helpful if you edit your markdown documents from other apps.\"), mdx(\"p\", null, \"You can also run the Janitor from a GitHub action to ensure that all changes coming to your workspace are up to date. This can be useful when editing your Foam notes from mobile (i.e. via \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://gitjournal.io\"\n  }, \"GitJournal\"), \"), or your Foam has multiple contributors and you want to ensure that all changes are correctly integrated.\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/features/workspace-janitor/","title":"Janitor"}}],"inboundReferences":[]}},"pageContext":{"slug":"/recipes/take-notes-from-mobile-phone/","editUrl":"https://github.com/theowenyoung/gatsby-theme-primer-wiki/edit/master/example/content/recipes/take-notes-from-mobile-phone.md","contributors":[]}},"staticQueryHashes":["2426452686","3309604493","900254191"]}